//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CreateSheets.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CreateSheets.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hello.
        /// </summary>
        internal static string Hello {
            get {
                return ResourceManager.GetString("Hello", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sheets.
        /// </summary>
        internal static string R_ButtonNameBott {
            get {
                return ResourceManager.GetString("R_ButtonNameBott", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create.
        /// </summary>
        internal static string R_ButtonNameTop {
            get {
                return ResourceManager.GetString("R_ButtonNameTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate Existing Sheet.
        /// </summary>
        internal static string R_CommandDescription {
            get {
                return ResourceManager.GetString("R_CommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This option will create new empty sheets using the title block indicated and using the &quot;New Sheet Options&quot;.
        ///
        ///To create new sheet:
        ///1.  Select &quot;Create New Sheets&quot; from the list of Operations
        ///2.  (Optional): Change the &quot;New Sheet Options&quot;
        ///3.  (Optional): Indicate the number of copies (maximum is 99)
        ///4.  (Optional): Choose a title block to use for the new sheets.
        ///    or choose &lt;no titleblock&gt;
        ///
        ///Select OK to create the new sheets.
        ///Select cancel to not create the new sheets and exit.
        ///
        ///The a new sheet i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string R_HelpCreateSheets {
            get {
                return ResourceManager.GetString("R_HelpCreateSheets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This option will duplicate an existing sheet and all of the elements contained on the sheet, within the limitations set by Revit®.  That is, any element that can only occur once on a sheet (e.g. floor plan view) will not be copied - the other elements are copied to a location matching the orignial location.  Also, due to Revit® limitations, the viewport title will match the orignial but cannot be positioned to match the original. 
        ///
        ///If the current view is a sheet, the sheet is pre-selected as the sheet to  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string R_HelpDuplicateSheet {
            get {
                return ResourceManager.GetString("R_HelpDuplicateSheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This option is identical to the &quot;Duplicate Sheet&quot; option except that views restricted to placement on a single sheet will be copied, with detailing, and the view copy will be placed on the newly duplicated sheet.  Again, due to Revit® limitations, the viewport title will match the orignial but cannot be positioned to match the original.
        ///
        ///If the current view is a sheet, the sheet is pre-selected as the sheet to be duplicated.
        ///
        ///To duplicate a sheet and views:
        ///1.  (Optional): Open a sheet view
        ///2.  Select [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string R_HelpDuplicateSheetAndViews {
            get {
                return ResourceManager.GetString("R_HelpDuplicateSheetAndViews", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate Sheet Warning.
        /// </summary>
        internal static string R_MsgButtonFailDesc {
            get {
                return ResourceManager.GetString("R_MsgButtonFailDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to Add Button!.
        /// </summary>
        internal static string R_MsgButtonFailTitle {
            get {
                return ResourceManager.GetString("R_MsgButtonFailTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AO Tools.
        /// </summary>
        internal static string R_PanelName {
            get {
                return ResourceManager.GetString("R_PanelName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AO Tools.
        /// </summary>
        internal static string R_TabName {
            get {
                return ResourceManager.GetString("R_TabName", resourceCulture);
            }
        }
    }
}
